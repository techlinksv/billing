{
  "version": 3,
  "sources": ["../../lodash/_isIterateeCall.js", "../../lodash/split.js", "../../lodash/fp/split.js"],
  "sourcesContent": ["var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n", "var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;\n", "var convert = require('./convert'),\n    func = convert('split', require('../split'));\n\nfunc.placeholder = require('./placeholder');\nmodule.exports = func;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,QAAI,KAAK;AAAT,QACI,cAAc;AADlB,QAEI,UAAU;AAFd,QAGI,WAAW;AAYf,aAAS,eAAe,OAAO,OAAO,QAAQ;AAC5C,UAAI,CAAC,SAAS,MAAM,GAAG;AACrB,eAAO;AAAA,MACT;AACA,UAAI,OAAO,OAAO;AAClB,UAAI,QAAQ,WACH,YAAY,MAAM,KAAK,QAAQ,OAAO,OAAO,MAAM,IACnD,QAAQ,YAAY,SAAS,QAChC;AACJ,eAAO,GAAG,OAAO,KAAK,GAAG,KAAK;AAAA,MAChC;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC7BjB;AAAA;AAAA,QAAI,eAAe;AAAnB,QACI,YAAY;AADhB,QAEI,aAAa;AAFjB,QAGI,iBAAiB;AAHrB,QAII,WAAW;AAJf,QAKI,gBAAgB;AALpB,QAMI,WAAW;AAGf,QAAI,mBAAmB;AAqBvB,aAAS,MAAM,QAAQ,WAAW,OAAO;AACvC,UAAI,SAAS,OAAO,SAAS,YAAY,eAAe,QAAQ,WAAW,KAAK,GAAG;AACjF,oBAAY,QAAQ;AAAA,MACtB;AACA,cAAQ,UAAU,SAAY,mBAAmB,UAAU;AAC3D,UAAI,CAAC,OAAO;AACV,eAAO,CAAC;AAAA,MACV;AACA,eAAS,SAAS,MAAM;AACxB,UAAI,WACE,OAAO,aAAa,YACnB,aAAa,QAAQ,CAAC,SAAS,SAAS,IACxC;AACL,oBAAY,aAAa,SAAS;AAClC,YAAI,CAAC,aAAa,WAAW,MAAM,GAAG;AACpC,iBAAO,UAAU,cAAc,MAAM,GAAG,GAAG,KAAK;AAAA,QAClD;AAAA,MACF;AACA,aAAO,OAAO,MAAM,WAAW,KAAK;AAAA,IACtC;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACnDjB,IAAAA,iBAAA;AAAA;AAAA,QAAI,UAAU;AAAd,QACI,OAAO,QAAQ,SAAS,eAAmB;AAE/C,SAAK,cAAc;AACnB,WAAO,UAAU;AAAA;AAAA;",
  "names": ["require_split"]
}
