import {
  require_LodashWrapper,
  require_convert,
  require_flatRest,
  require_getData,
  require_getFuncName,
  require_isArray,
  require_isLaziable,
  require_placeholder
} from "./chunk-KWXHC2UF.js";
import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/lodash/_createFlow.js
var require_createFlow = __commonJS({
  "node_modules/lodash/_createFlow.js"(exports, module) {
    var LodashWrapper = require_LodashWrapper();
    var flatRest = require_flatRest();
    var getData = require_getData();
    var getFuncName = require_getFuncName();
    var isArray = require_isArray();
    var isLaziable = require_isLaziable();
    var FUNC_ERROR_TEXT = "Expected a function";
    var WRAP_CURRY_FLAG = 8;
    var WRAP_PARTIAL_FLAG = 32;
    var WRAP_ARY_FLAG = 128;
    var WRAP_REARG_FLAG = 256;
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == "wrapper") {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];
          var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : void 0;
          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments, value = args[0];
          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index2 = 0, result = length ? funcs[index2].apply(this, args) : value;
          while (++index2 < length) {
            result = funcs[index2].call(this, result);
          }
          return result;
        };
      });
    }
    module.exports = createFlow;
  }
});

// node_modules/lodash/flow.js
var require_flow = __commonJS({
  "node_modules/lodash/flow.js"(exports, module) {
    var createFlow = require_createFlow();
    var flow = createFlow();
    module.exports = flow;
  }
});

// node_modules/lodash/fp/flow.js
var require_flow2 = __commonJS({
  "node_modules/lodash/fp/flow.js"(exports, module) {
    var convert = require_convert();
    var func = convert("flow", require_flow());
    func.placeholder = require_placeholder();
    module.exports = func;
  }
});
export default require_flow2();
//# sourceMappingURL=lodash_fp_flow.js.map
