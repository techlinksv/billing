var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  calculateIntegrityHash: () => calculateIntegrityHash,
  default: () => manifestSRI
});
var import_crypto = require("crypto");
var import_path = require("path");
var import_fs = require("fs");
function manifestSRI(options = {}) {
  const {
    algorithms = ["sha384"],
    manifestPaths = ["manifest.json", "manifest-assets.json"]
  } = options;
  return {
    name: "vite-plugin-manifest-sri",
    apply: "build",
    enforce: "post",
    async writeBundle({ dir }) {
      await Promise.all(manifestPaths.map((path) => augmentManifest(path, algorithms, dir)));
    }
  };
}
async function augmentManifest(manifestPath, algorithms, outDir) {
  const resolveInOutDir = (path) => (0, import_path.resolve)(outDir, path);
  manifestPath = resolveInOutDir(manifestPath);
  const manifest = await import_fs.promises.readFile(manifestPath, "utf-8").then(JSON.parse, () => void 0);
  if (manifest) {
    await Promise.all(Object.values(manifest).map(async (chunk) => {
      chunk.integrity = integrityForAsset(await import_fs.promises.readFile(resolveInOutDir(chunk.file)), algorithms);
    }));
    await import_fs.promises.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
  }
}
function integrityForAsset(source, algorithms) {
  return algorithms.map((algorithm) => calculateIntegrityHash(source, algorithm)).join(" ");
}
function calculateIntegrityHash(source, algorithm) {
  const hash = (0, import_crypto.createHash)(algorithm).update(source).digest().toString("base64");
  return `${algorithm.toLowerCase()}-${hash}`;
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  calculateIntegrityHash
});
